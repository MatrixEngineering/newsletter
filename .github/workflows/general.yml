name: Rust

on:
  # NB: this differs from the book's project!
  # These settings allow us to run this specific CI pipeline for PRs against
  # this specific branch (a.k.a. book chapter).
 push:
   branches:
      - v1
 pull_request:
   types: [opened, synchronize, reopened]
   branches:
     - v1

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.7.4
  SQLX_FEATURES: "rustls, postgres"

# A workflow run is made up of one or more jobs, which run in parallel by default
# Each job runs in a runner environment specified by runs-on
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Check out respository code
        uses: actions/checkout@v1

      - name: Install the rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache Action
        uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{env.SQLX_VERSION}}
      - name: Install sqlx-cli
        uses:
          cargo install sqlx-cli
          --version=${{env.SQLX_VERSION}}
          --features ${{env.SQLX_FEATURES}}
          --no-default-features
          --locked
          # The --locked flag can be used to force Cargo to use the packaged Cargo.lock file if it is available.
          # This may be useful for ensuring reproducible builds, to use the exact same set of dependencies that were available when the package was published.
          # It may also be useful if a newer version of a dependency is published that no longer builds on your system, or has other problems
      - name: Install postgrs-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y

      - name: Run tests
        run: cargo test

    # `fmt` container job
  fmt:
      name: Rustfmt
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v1
        - uses: dtolnay/rust-toolchain@stable
          with:
            # Specific to dtolnay/rust-toolchain: Comma-separated string of additional components to install
            components: rustfmt
        - name: Enforce formatting
          run: cargo fmt --check

    # `clippy` container job
  clippy:
      name: Clippy
      runs-on: ubuntu-latest
      services:
        postgres:
          image: postgres:14
          env:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: password
            POSTGRES_DB: postgres
          ports:
            - 5432:5432
      steps:
        - uses: actions/checkout@v1
        - uses: dtolnay/rust-toolchain@stable
          with:
            components: clippy
        - uses: Swatinem/rust-cache@v2
          with:
            key: sqlx-${{ env.SQLX_VERSION }}
        - name: Install sqlx-cli
          run:
            cargo install sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features ${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked
        - name: Install postgresql-client
          run: sudo apt-get update && sudo apt-get install postgresql-client -y
        - name: Migrate database
          run: SKIP_DOCKER=true ./scripts/init_db.sh
        - name: Linting
          run: cargo clippy -- -D warnings

    # `coverage` container job
  coverage:
      name: Code coverage
      runs-on: ubuntu-latest
      services:
        postgres:
          image: postgres:14
          env:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: password
            POSTGRES_DB: postgres
          ports:
            - 5432:5432
      steps:
        - name: Checkout repository
          uses: actions/checkout@v1
        - uses: dtolnay/rust-toolchain@stable
        - name: Install postgresql-client
          run: sudo apt-get update && sudo apt-get install postgresql-client -y
        - uses: Swatinem/rust-cache@v2
          with:
            key: sqlx-${{ env.SQLX_VERSION }}
        - name: Install sqlx-cli
          run:
            cargo install sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features ${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked
        - name: Migrate database
          run: SKIP_DOCKER=true ./scripts/init_db.sh
        - name: Generate code coverage
          run: cargo install cargo-tarpaulin && cargo tarpaulin --verbose --workspace
