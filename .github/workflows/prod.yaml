name: "Build, Test and Deploy to Production"
on:
  push:
    branches: main
env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.7.1
  SQLX_FEATURES: "rustls,postgres"
jobs:
  build:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: "postgres:14"
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - "5432:5432"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install the Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Rust Cache Action
        uses: Swatinem/rust-cache@v2
        with:
          key: "sqlx-${{ env.SQLX_VERSION }}"
      - name: Install sqlx-cli
        run: |
          cargo install sqlx-cli --version=${{ env.SQLX_VERSION }} --features ${{ env.SQLX_FEATURES }} --no-default-features --locked
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Run tests
        run: cargo test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Debug Docker login
        run: docker info

      - name: Build and push Docker images
        run: |
          docker buildx build --push --tag ${{ secrets.DOCKER_USERNAME }}/zero2prod:latest .

      - name: Verify Docker images
        run: docker images

  deploy:
      needs: build
      runs-on: ubuntu-latest
      
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
      
        - name: Log in to Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
      
        - name: Install sshpass
          run: sudo apt-get install sshpass
      
        - name: Copy docker-compose.yml to droplet
          run: sshpass -v -p ${{ secrets.DROPLET_PASSWORD }} scp -o StrictHostKeyChecking=no docker-compose.yml root@${{ vars.DROPLET_IP }}:~
      
        - name: Deploy
          uses: appleboy/ssh-action@master
          with:
              host: ${{ vars.DROPLET_IP }}
              username: root
              password: ${{ secrets.DROPLET_PASSWORD }}
              script: |
                cd ~
                docker-compose down
                docker-compose pull
                docker-compose up -d
